import random
import string

def generate_password(length, include_uppercase=True, include_lowercase=True, include_digits=True, include_symbols=True):
  """
  Generates a random password based on user-specified criteria.

  Args:
      length (int): The desired length of the password.
      include_uppercase (bool, optional): Whether to include uppercase letters. Defaults to True.
      include_lowercase (bool, optional): Whether to include lowercase letters. Defaults to True.
      include_digits (bool, optional): Whether to include digits. Defaults to True.
      include_symbols (bool, optional): Whether to include symbols. Defaults to True.

  Returns:
      str: The generated password.
  """

  characters = ""
  if include_uppercase:
    characters += string.ascii_uppercase
  if include_lowercase:
    characters += string.ascii_lowercase
  if include_digits:
    characters += string.digits
  if include_symbols:
    characters += string.punctuation

  min_chars = sum([include_uppercase, include_lowercase, include_digits, include_symbols])
  if min_chars > len(characters):
    raise ValueError("Selected complexity options require more character types than available.")

  password = ''.join(random.sample(characters, length))
  return password

while True:
  try:
    length = int(input("Enter desired password length (minimum 8 characters): "))
    if length < 8:
      print("Password length must be at least 8 characters.")
      continue

    include_uppercase = input("Include uppercase letters (y/n)? ").lower() == 'y'
    include_lowercase = input("Include lowercase letters (y/n)? ").lower() == 'y'
    include_digits = input("Include digits (y/n)? ").lower() == 'y'
    include_symbols = input("Include symbols (y/n)? ").lower() == 'y'

    
    password = generate_password(length, include_uppercase, include_lowercase, include_digits, include_symbols)
    print(f"Your generated password: {password}")

    
    choice = input("Generate another password (y/n)? ").lower()
    if choice != 'y':
      break

  except ValueError as e:
    print(f"Error: {e}")

print("Password generator closed.")
